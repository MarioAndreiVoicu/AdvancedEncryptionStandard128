/**
 * @file aes_interface.cppm
 * @brief Module interface for AES-128 encryption and decryption.
 *
 * This module exports the AES class and related types. It defines the public API used
 * for encrypting and decrypting 16-byte blocks, along with helper methods for converting
 * between a flat array and the 4x4 state matrix.
 */

export module aes_interface;

#include <array>
#include <string>
#include <random>
#include <stdexcept>
#include <cstdint>

/**
 * @brief Dimension of the AES state matrix.
 *
 * AES represents each block as a 4x4 matrix of bytes.
 */
export constexpr size_t MATRIX_DIM = 4;

/**
 * @brief Total number of bytes in an AES block.
 *
 * Calculated as MATRIX_DIM * MATRIX_DIM (4×4 = 16).
 */
export constexpr size_t BLOCK_SIZE = MATRIX_DIM * MATRIX_DIM;

/**
 * @brief Number of encryption rounds for AES-128.
 *
 * AES-128 performs 10 rounds of transformation.
 */
export constexpr size_t NUM_ROUNDS = 10;

/**
 * @brief Total number of round keys produced during key expansion.
 *
 * This includes the initial key plus one round key per round.
 */
export constexpr size_t NUM_ROUND_KEYS = NUM_ROUNDS + 1;

/** @brief Alias for an 8-bit byte. */
export using Byte = uint8_t;

/**
 * @brief A Word in AES.
 *
 * A Word is defined as an array of MATRIX_DIM bytes. It is the basic unit used in key expansion.
 */
export using Word = std::array<Byte, MATRIX_DIM>;

/**
 * @brief The AES state.
 *
 * The state is a MATRIX_DIM×MATRIX_DIM matrix of bytes used as the working block
 * during AES encryption and decryption.
 */
export using State = std::array<std::array<Byte, MATRIX_DIM>, MATRIX_DIM>;

/**
 * @brief AES key type.
 *
 * A Key is represented the same way as the state (a 4x4 matrix of bytes).
 */
export using Key = State;


/**
 * @brief AES-128 encryption and decryption class.
 *
 * Provides methods to set a key, encrypt a single 16-byte block, and decrypt it.
 */
export class AES {
public:
    /**
     * @brief Default constructor.
     */
    AES() = default;

    /**
     * @brief Constructs an AES instance with the given key.
     * @param key A 16-byte key in matrix form.
     */
    AES(const Key& key);

    /**
     * @brief Sets the AES key and performs key expansion.
     * @param key A 16-byte key in matrix form.
     */
    void SetKey(const Key& key);

    /**
     * @brief Generates a random 16-byte key.
     * @return A 16-byte key in matrix form.
     */
    static Key GenerateRandomKey();

    /**
     * @brief Encrypts a single 16-byte block.
     * @param state The 16-byte block to encrypt (as a 4x4 state matrix).
     */
    void EncryptBlock(State& state);

    /**
     * @brief Decrypts a single 16-byte block.
     * @param state The 16-byte block to decrypt (as a 4x4 state matrix).
     */
    void DecryptBlock(State& state);

    /**
     * @brief Converts a flat 16-byte array into a 4x4 state matrix.
     * @param arr The 16-byte array.
     * @return The corresponding 4x4 state matrix.
     */
    static State ArrayToState(const std::array<Byte, BLOCK_SIZE>& arr);

    /**
     * @brief Converts a 4x4 state matrix into a flat 16-byte array.
     * @param state The 4x4 state matrix.
     * @return The corresponding 16-byte array.
     */
    static std::array<Byte, BLOCK_SIZE> StateToArray(const State& state);

private:
    Key mainKey;                           ///< The primary 16-byte key in matrix form.
    std::array<Key, NUM_ROUND_KEYS> roundKeys;         ///< The expanded round keys for all AES rounds.

    /**
     * @brief Expands the primary key into round keys.
     */
    void KeyExpansion();

    // Internal helper functions for key expansion and AES transformations.
    static void RotWord(Word& word);
    static void SubWord(Word& word);
    static Byte Rcon(size_t round);
    static void XORwords(Word& word1, const Word& word2);
    static void WordForRoundKey(Word& word, const Word& wordPrev, size_t wordNumber);
    static void CopyWordInKey(const Word& word, Key& key, size_t wordNumber);

    static void SubBytes(State& state);
    static void ShiftRows(State& state);
    static Byte gmul(Byte a, Byte b);
    static void MixColumn(Word& column);
    static void MixColumns(State& state);
    static void InverseShiftRows(State& state);
    static void InverseSubBytes(State& state);
    static void InverseMixColumns(State& state);
    static void AddRoundKey(State& state, const Key& roundKey);

    // S-box and inverse S-box (compile-time constants)
    static constexpr std::array<std::array<Byte, 16>, 16> sBox{ {
        {0x63,0x7c,0x77,0x7b,0xf2,0x6b,0x6f,0xc5,0x30,0x01,0x67,0x2b,0xfe,0xd7,0xab,0x76},
        {0xca,0x82,0xc9,0x7d,0xfa,0x59,0x47,0xf0,0xad,0xd4,0xa2,0xaf,0x9c,0xa4,0x72,0xc0},
        {0xb7,0xfd,0x93,0x26,0x36,0x3f,0xf7,0xcc,0x34,0xa5,0xe5,0xf1,0x71,0xd8,0x31,0x15},
        {0x04,0xc7,0x23,0xc3,0x18,0x96,0x05,0x9a,0x07,0x12,0x80,0xe2,0xeb,0x27,0xb2,0x75},
        {0x09,0x83,0x2c,0x1a,0x1b,0x6e,0x5a,0xa0,0x52,0x3b,0xd6,0xb3,0x29,0xe3,0x2f,0x84},
        {0x53,0xd1,0x00,0xed,0x20,0xfc,0xb1,0x5b,0x6a,0xcb,0xbe,0x39,0x4a,0x4c,0x58,0xcf},
        {0xd0,0xef,0xaa,0xfb,0x43,0x4d,0x33,0x85,0x45,0xf9,0x02,0x7f,0x50,0x3c,0x9f,0xa8},
        {0x51,0xa3,0x40,0x8f,0x92,0x9d,0x38,0xf5,0xbc,0xb6,0xda,0x21,0x10,0xff,0xf3,0xd2},
        {0xcd,0x0c,0x13,0xec,0x5f,0x97,0x44,0x17,0xc4,0xa7,0x7e,0x3d,0x64,0x5d,0x19,0x73},
        {0x60,0x81,0x4f,0xdc,0x22,0x2a,0x90,0x88,0x46,0xee,0xb8,0x14,0xde,0x5e,0x0b,0xdb},
        {0xe0,0x32,0x3a,0x0a,0x49,0x06,0x24,0x5c,0xc2,0xd3,0xac,0x62,0x91,0x95,0xe4,0x79},
        {0xe7,0xc8,0x37,0x6d,0x8d,0xd5,0x4e,0xa9,0x6c,0x56,0xf4,0xea,0x65,0x7a,0xae,0x08},
        {0xba,0x78,0x25,0x2e,0x1c,0xa6,0xb4,0xc6,0xe8,0xdd,0x74,0x1f,0x4b,0xbd,0x8b,0x8a},
        {0x70,0x3e,0xb5,0x66,0x48,0x03,0xf6,0x0e,0x61,0x35,0x57,0xb9,0x86,0xc1,0x1d,0x9e},
        {0xe1,0xf8,0x98,0x11,0x69,0xd9,0x8e,0x94,0x9b,0x1e,0x87,0xe9,0xce,0x55,0x28,0xdf},
        {0x8c,0xa1,0x89,0x0d,0xbf,0xe6,0x42,0x68,0x41,0x99,0x2d,0x0f,0xb0,0x54,0xbb,0x16}
    } };
    static constexpr std::array<std::array<Byte, 16>, 16> invSBox{ {
        {0x52,0x09,0x6a,0xd5,0x30,0x36,0xa5,0x38,0xbf,0x40,0xa3,0x9e,0x81,0xf3,0xd7,0xfb},
        {0x7c,0xe3,0x39,0x82,0x9b,0x2f,0xff,0x87,0x34,0x8e,0x43,0x44,0xc4,0xde,0xe9,0xcb},
        {0x54,0x7b,0x94,0x32,0xa6,0xc2,0x23,0x3d,0xee,0x4c,0x95,0x0b,0x42,0xfa,0xc3,0x4e},
        {0x08,0x2e,0xa1,0x66,0x28,0xd9,0x24,0xb2,0x76,0x5b,0xa2,0x49,0x6d,0x8b,0xd1,0x25},
        {0x72,0xf8,0xf6,0x64,0x86,0x68,0x98,0x16,0xd4,0xa4,0x5c,0xcc,0x5d,0x65,0xb6,0x92},
        {0x6c,0x70,0x48,0x50,0xfd,0xed,0xb9,0xda,0x5e,0x15,0x46,0x57,0xa7,0x8d,0x9d,0x84},
        {0x90,0xd8,0xab,0x00,0x8c,0xbc,0xd3,0x0a,0xf7,0xe4,0x58,0x05,0xb8,0xb3,0x45,0x06},
        {0xd0,0x2c,0x1e,0x8f,0xca,0x3f,0x0f,0x02,0xc1,0xaf,0xbd,0x03,0x01,0x13,0x8a,0x6b},
        {0x3a,0x91,0x11,0x41,0x4f,0x67,0xdc,0xea,0x97,0xf2,0xcf,0xce,0xf0,0xb4,0xe6,0x73},
        {0x96,0xac,0x74,0x22,0xe7,0xad,0x35,0x85,0xe2,0xf9,0x37,0xe8,0x1c,0x75,0xdf,0x6e},
        {0x47,0xf1,0x1a,0x71,0x1d,0x29,0xc5,0x89,0x6f,0xb7,0x62,0x0e,0xaa,0x18,0xbe,0x1b},
        {0xfc,0x56,0x3e,0x4b,0xc6,0xd2,0x79,0x20,0x9a,0xdb,0xc0,0xfe,0x78,0xcd,0x5a,0xf4},
        {0x1f,0xdd,0xa8,0x33,0x88,0x07,0xc7,0x31,0xb1,0x12,0x10,0x59,0x27,0x80,0xec,0x5f},
        {0x60,0x51,0x7f,0xa9,0x19,0xb5,0x4a,0x0d,0x2d,0xe5,0x7a,0x9f,0x93,0xc9,0x9c,0xef},
        {0xa0,0xe0,0x3b,0x4d,0xae,0x2a,0xf5,0xb0,0xc8,0xeb,0xbb,0x3c,0x83,0x53,0x99,0x61},
        {0x17,0x2b,0x04,0x7e,0xba,0x77,0xd6,0x26,0xe1,0x69,0x14,0x63,0x55,0x21,0x0c,0x7d}
    } };
};